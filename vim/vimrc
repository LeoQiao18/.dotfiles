" ===== Leader Shortcuts =====
let mapleader=","

" include plugins
so ~/.dotfiles/vim/plugins.vim

" Set to auto read when a file is changed from the outside
set autoread

nnoremap <leader>ev :split $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

nnoremap <leader>rn :call NumberToggle()<CR>

" ===== Colors =====
set background=dark
colorscheme gruvbox

set laststatus=2
set noshowmode  " hide original statusline for lightline

if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" set font for macvim
if has('gui_macvim')
    set guifont=Monaco:h12
endif

"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif

" ===== Spaces & Tab =====
" When coding, auto-indent by 4 spaces, just like in K&R
" Note that this does NOT change tab into 4 spaces
" You can do that with "set tabstop=4", which is a BAD idea
" Always replace tab with 8 spaces, except for makefiles
set tabstop=8
set softtabstop=0
set expandtab
set shiftwidth=4

set linebreak   " only wrap at certain characters

set autoindent
set smartindent
set wrap

" language-specific styles
autocmd FileType c,cpp setlocal shiftwidth=4
autocmd FileType go setlocal shiftwidth=8 noexpandtab
autocmd FileType html setlocal shiftwidth=2
autocmd FileType java setlocal shiftwidth=4
autocmd FileType javascript setlocal shiftwidth=2
autocmd FileType json setlocal shiftwidth=2
autocmd FileType make setlocal shiftwidth=8 noexpandtab
autocmd FileType python setlocal shiftwidth=4
autocmd FileType sh,zsh setlocal shiftwidth=2
autocmd FileType yaml setlocal shiftwidth=2

" My settings when editing *.txt files
"   - automatically indent lines according to previous lines
"   - replace tab with 8 spaces
"   - when I hit tab key, move 2 spaces instead of 8
"   - wrap text if I go longer than 76 columns
"   - check spelling
autocmd FileType text setlocal shiftwidth=2 textwidth=76 spell spelllang=en_us

" Don't do spell-checking on Vim help files
autocmd FileType help setlocal nospell

" ===== UI Config =====
set encoding=utf8       " set uft8 as standard encoding and en_US as the standard language

set number    " show line numbers
set relativenumber      " use relative number
set colorcolumn=80      " do not code beyond 79 characters per line
set showcmd    " show command in bottom bar
set cursorline    " highlight current line
set cursorcolumn    " highlight current column
filetype indent on    "load filetype-specific indent files
set wildmenu    " visual autocomplete for command menu
set showmatch    " highlight matching [{()}]
set mat=2       " many tenths of a second to blink when matching brackets
set scrolloff=7        " scrolloff = 7
set lazyredraw  " good performace config

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" ===== Files, backups and undo =====
" Turn off backup
set nobackup
set nowb
set noswapfile

" ===== Searching =====
set incsearch    " search as characters are entered
set hlsearch    " highlight matches
set magic       " for regular expressions use 'magic' option

" Ignore case when searching
" - override this setting by tacking on \c or \C to your search term to make
"   your search always case-insensitive or case-sensitive, respectively.
set ignorecase
set smartcase   " case-sensative if has upper-case

" turnoff search highlight
nnoremap <leader><space> :nohlsearch<CR>

" ===== Folding =====
set foldenable    " enable folding
set foldlevelstart=10    " open most folds by default
set foldnestmax=10    " 10 nestest fold max
set foldmethod=indent    " foldbased on indent level

" ===== Movement, tabs, windows and buffers =====
" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Can open another buffer while current one is modified
set hidden

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" done with plugin
" " Move between windows
" map <C-j> <C-W>j
" map <C-k> <C-W>k
" map <C-h> <C-W>h
" map <C-l> <C-W>l

" Split windows
map <leader>hs :split<cr>
map <leader>vs :vsplit<cr>

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" ===== Visual mode =====
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" ===== Editing mapping =====
" Remap VIM 0 to first non-blank character
map 0 ^

inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
    nmap <D-j> <M-j>
    nmap <D-k> <M-k>
    vmap <D-j> <M-j>
    vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt, *.c, *.cpp, *.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

" ===== Helper functions =====
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Toggle relative number
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

" ===== Enable project-specific .vimrc =====
set exrc
set secure
